#!/usr/bin/env bash

# grumi
# 🖼️ Upload an image, video or album to Imgur via the command line.
readonly program="$(basename "$0")"
readonly version=0.4.0

function process_arguments() {
    # If no arguments are supplied.
    if (( "$#" == 0 )); then
        print_usage
        exit
    fi

    while [ -n "$1" ]; do
        case "$1" in
            -h|--help) print_usage; exit ;;
            -v|--version) printf '%s: version %s\n' "$program" "$version"; exit ;;
            -a|--album) readonly use_album=true ;;
            -c|--client_id) client_id="$2"; shift ;;
            -d|--disable_audio) readonly disable_audio=1 ;;
            -*) printf '%s: Invalid option: %s\n' "$program" "$1" 1>&2; exit 1 ;;
            *) args+=("$1") ;;
        esac    
        shift
    done
}

function print_usage() {
    cat <<EOF
Usage: $program [OPTIONS] <file1> <file2>...
Upload an image, video or album to Imgur.

Options:
    -h, --help              Output this message.
    -v, --version           Output the current version.
    -a, --album             Creates an album containing the provided image(s)/video(s).
    -c, --client_id         Imgur Client ID (overrides ${HOME}/.grumi).
    -d, --disable_audio     Disables audio in provided videos.
EOF
}

function depends_on() {
    local -r deps=("$@")
    local missing_deps=()

    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            missing_deps+=("$dep")
        fi
    done

    if (( "${#missing_deps[@]}" > 0 )); then
        printf '%s: Missing dependancy: %s\n' "$program" "${missing_deps[@]}" 1>&2
        exit 1
    fi
}

function check_id() {
    if [ -z "$client_id" ]; then
        if [ -f "${HOME}/.grumi" ]; then
            readonly client_id="$(<"${HOME}/.grumi")"
        fi

        if [ -z "$client_id" ]; then
            printf '%s: You must provide a valid Client ID using -c, --client_id or in %s/.grumi\n' "$program" "$HOME" 1>&2
            printf '%s: Login and generate one here: https://api.imgur.com/oauth2/addclient\n' "$program" 1>&2

            >"${HOME}/.grumi"
            exit 1
        fi
    fi
}

function process_files() {
    if (( "$#" == 0 )); then
        printf '%s: No files were provided.\n' "$program" 1>&2
        exit 1
    fi

    local uploaded_files=()
    for f in "$@"; do
        if [ ! -f "$f" ] && [[ "$f" != "http"* ]]; then
            printf '%s: %s: No such file.\n' "$program" "$f" 1>&2
            continue
        fi

        local result
        result="$(upload_file "$f")"
        if (( "$?" == 1 )); then
            printf '%s: %s: Failed to upload (error: %s).\n' "$program" "$f" "$result" 1>&2
            continue
        fi

        uploaded_files+=("$result")
    done

    if (( "${#uploaded_files[@]}" == 0 )); then
        printf '%s: No files were uploaded.\n' "$program"
        return
    fi

    # Create and add to album if specified, otherwise print URLs.
    if [[ "$use_album" == true ]]; then
        local album
        album="$(create_album "${uploaded_files[@]}")"
        if (( "$?" == 1 )); then
            printf '%s: Failed to album (error: %s).\n' "$program" "$album" 1>&2
            print_urls "${uploaded_files[@]}"
            return
        fi

        printf '%s: https://imgur.com/a/%s\n' "$program" "$album"
    else
        print_urls "${uploaded_files[@]}"
    fi
}

function upload_file() {
    local -r file_type="$(file -b --mime-type "$1" | sed 's/\/.*$//')=@"

    local -r response="$(curl -s --http1.1 \
        -X POST https://api.imgur.com/3/"$([[ "$file_type" == "video"* ]] && echo upload || echo image)" \
        -H "Authorization: Client-ID ${client_id}" \
        -F "disable_audio=${disable_audio}" \
        -F "$([[ "$1" == "http"* ]] && echo image= || echo "$file_type")${1}")"

    # Error handling is tricky as the returned JSON is not consistent (sometimes data.error is an object).
    if [[ "$(jq -r '.success' <<< "$response")" == false ]]; then
        local error="$(jq -r '.data.error.message' 2>/dev/null <<< "$response")"
        if [ -z "$error" ]; then
            error="$(jq -r '.data.error' 2>/dev/null <<< "$response")"
        fi

        echo "$error"
        return 1
    fi

    # Certain videos formats get returned without an extension in the URL.
    local link="$(jq -r '.data.deletehash + ";" + .data.link' <<< "$response")"
    if [[ "$link" == *'.' ]]; then
        link="${link}mp4"
    fi

    echo "${link};${1}"
}

function create_album() {
    form=()
    for i in "$@"; do
        form+=("-F deletehashes[]="$(cut -d ';' -f 1 <<< "$i")"")
    done

    local -r response="$(curl -s --http1.1 \
        -X POST 'https://api.imgur.com/3/album' \
        -H "Authorization: Client-ID ${client_id}" \
        "${form[@]}")"

    if [[ "$(jq -r '.success' <<< "$response")" == false ]]; then
        local error="$(jq -r '.data.error.message' 2>/dev/null <<< "$response")"
        if [ -z "$error" ]; then
            error="$(jq -r '.data.error' 2>/dev/null <<< "$response")"
        fi

        echo "$error"
        return 1
    fi

    echo "$(jq -r '.data.id' <<< "$response")"
}

function print_urls() {
    for f in "$@"; do
        local -r url="$(cut -d';' -f2 <<< "$f")"
        local -r src="$(cut -d';' -f3 <<< "$f")"
        printf '%s: %s (%s)\n' "$program" "$url" "${src##*/}"
    done
}

args=()
process_arguments "$@"
set -- "${args[@]}"

# Depends on https://stedolan.github.io/jq
depends_on 'file' 'curl' 'jq'
check_id
process_files "$@"
