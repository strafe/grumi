#!/usr/bin/env bash

# grumi
# 🖼️ Upload an image, video or album to Imgur.
readonly program="$(basename "$0")"
readonly version='0.1.0'

# Imgur's API docs are infamously bad, but 10MB for images and 200MB for videos seems correct.
readonly image_max_size='10000000'
readonly video_max_size='200000000'
readonly video_max_length='60.0'

function process_args() {
    while [[ "$1" ]]; do
        case "$1" in
            '-h'|'--help')
                show_usage
                exit
                ;;
            '-v'|'--version')
                printf '%s version %s\n' "$program" "$version"
                exit
                ;;
            '-c'|'--client_id')
                client_id="$2"
                shift
                ;;
            '-d'|'--disable_audio')
                readonly disable_audio='1'
                ;;
            '-a'|'--album')
                readonly use_album='true'
                ;;
            '-'*)
                printf 'Invalid option: %s\n' "$1" 1>&2
                exit 1
                ;;
            *)
                args+=("$1")
                ;;
        esac
        shift
    done
}

function show_usage() {
    cat <<EOF
Usage: $program [OPTIONS] <file1> <file2>...
Upload an image, video or album to Imgur.

Options:
    -h, --help              Output this message.
    -v, --version           Output the current version.
    -c, --client_id         Imgur Client ID (overrides ${HOME}/.grumi).
    -d, --disable_audio     Disables audio in passed videos.
    -a, --album             Create an album containing the passed images/videos.
EOF
}

function depends_on() {
    local -r deps=("$@")
    local missing_deps=()

    for dep in "${deps[@]}"; do
        if ! command -v "$dep" &>/dev/null; then
            missing_deps+=("$dep")
        fi
    done

    if [[ "${#missing_deps[@]}" -gt 0 ]]; then
        printf 'Missing dependancy: %s\n' "${missing_deps[@]}" 1>&2; exit 1
    fi
}

function check_client_id() {
    if [[ -z "$client_id" ]]; then
        if [[ -f "${HOME}/.grumi" ]]; then
            readonly client_id="$(<${HOME}/.grumi)" 2> /dev/null
        fi

        if [[ -z "$client_id" ]]; then
            printf 'You must provide a valid Client ID using -c, --client_id or in %s/.grumi\n' "$HOME" 1>&2
            printf 'Login and generate one here: https://api.imgur.com/oauth2/addclient\n' 1>&2
            exit 1
        fi
    fi
}

function process_files() {
    if [[ "$#" -eq 0 ]]; then
        printf 'No files passed.\n' 1>&2
        exit 1
    fi

    for f in "$@"; do
        if [[ ! -f "$f" ]]; then
            printf 'grumi: %s: No such file.\n' "$f" 1>&2
            continue
        fi

        # Has to be declared, then set for $? to work: https://tldp.org/LDP/abs/html/localvar.html
        local mime_type
        mime_type="$(check_mime_type "$f")"
        if [[ "$?" -eq 1 ]]; then
            printf 'grumi: %s: Invalid mime type (%s).\n' "$f" "$mime_type" 1>&2
            continue
        fi

        # Imgur limits the size of images/videos uploaded through the API seperately to their website.
        local max_size
        max_size="$(check_file_size "$f" "$mime_type")"
        if [[ "$?" -eq 1 ]]; then
            printf 'grumi: %s: File too large (max: %sMB).\n' "$f" "$max_size" 1>&2
            continue
        fi

        # Videos have a maximum length of 60 seconds.
        if [[ "$mime_type" == "video"* ]]; then
            check_video_length "$f"
            if [[ "$?" -eq 1 ]]; then
                printf 'grumi: %s: Video too long (max: %ss).\n' "$f" "$video_max_length" 1>&2
                continue
            fi
        fi

        # Upload!
        local result
        result="$(upload_file "$f" "$mime_type")"
        if [[ "$?" -eq 1 ]]; then
            printf 'grumi: %s: Failed to upload (response: %s).\n' "$f" "$result" 1>&2
            continue
        fi

        uploaded_files+=("$result")
    done
}

function check_mime_type() {
    local -r mime_type="$(file -b --mime-type "$1")"
    echo "$mime_type"

    # Supported image types.
    if [[ "$mime_type" =~ ^('image/jpeg'|'image/gif'|'image/apng'|'image/tiff'|'image/png')$ ]]; then
        return
    fi

    # Supported video types (now supports mp4 and quicktime!).
    if [[ "$mime_type" =~ ^('video/mp4'|'video/webm'|'video/x-matroska'|'video/quicktime'|'video/x-flv'|'video/x-msvideo'|'video/x-ms-wmv'|'video/mpeg')$ ]]; then
        return
    fi

    return 1
}

function check_file_size() {
    # stat differs between BSD and GNU coreutils.
    local stat_fmt
    case "$(stat --version 2> /dev/null | grep -o 'stat\s(GNU\scoreutils)')" in
        'stat (GNU coreutils)')
            stat_fmt='-c%s'
            ;;
        '')
            stat_fmt='-f%z'
            ;;
    esac

    local max_size
    case "$2" in
        'image'*)
            max_size="$image_max_size"
            ;;
        'video'*)
            max_size="$video_max_size"
            ;;
    esac

    if [[ "$(stat "$stat_fmt" "$1")" -gt "$max_size" ]]; then
        echo "$(expr "$max_size" / '1000000')"
        return 1
    fi
}

function check_video_length() {
    depends_on 'ffprobe'

    if [[ "$(ffprobe -i "$1" -show_entries format=duration -v quiet -of csv='p=0')" > "$video_max_length" ]]; then
        return 1
    fi
}

function upload_file() {
    local file_type
    case "$2" in
        'image'*)
            file_type='image'
            ;;
        'video'*)
            file_type='video'
            ;;
    esac

    response="$(curl -s \
        -X POST 'https://api.imgur.com/3/upload' \
        -H "Authorization: Client-ID ${client_id}" \
        -F "disable_audio=${disable_audio}" \
        -F "${file_type}=@${1}")"

    # Responses are just empty sometimes.
    if [[ -z "$response" ]]; then
        echo "No reponse"
        return 1
    fi

    local link="$(jq -r '.data.deletehash + ";" + .data.link' <<< "$response")"
    if [[ "$link" == 'null' ]]; then
        local err="$(jq 'map(.[0]) | .[].status' 2> /dev/null <<< "$response")"
        if [[ "$err" != 'null' ]]; then
            echo "$err"
            return 1
        fi

        echo "$response"
        return 1
    fi

    # Imgur doesn't append the extension for videos, shit website.
    if [[ "$link" == *'.' ]]; then
        link="${link}mp4"
    fi

    echo "${link##*$'\n'}"
}

function create_album() {
    form=()
    for i in "${uploaded_files[@]}"; do
        form+=(-F "deletehashes[]="$(cut -d';' -f1 <<< "$i")"")
    done

    response="$(curl -s \
        -X POST 'https://api.imgur.com/3/album' \
        -H "Authorization: Client-ID ${client_id}" \
        "${form[@]}")"

    local -r album="$(jq -r '.data.id' <<< "$response")"
    if [[ "$album" == 'null' ]]; then
        printf 'grumi: Failed to create album (%s).\n' "$response" 1>&2
        print_images
        return
    fi

    printf 'https://imgur.com/a/%s\n' "$album"
}

function print_images() {
    # Print out each URL.
    for f in "${uploaded_files[@]}"; do
        printf '%s\n' "$(cut -d';' -f2 <<< "$f")"
    done
}

# Process arguments.
args=()
process_args "$@"
set -- "${args[@]}"

# Depends on https://stedolan.github.io/jq
depends_on 'file' 'curl' 'jq'
check_client_id

# Process files.
uploaded_files=()
process_files "$@"

# Check if no files were uploaded.
if [[ "${#uploaded_files[@]}" -eq 0 ]]; then
    printf 'No files uploaded.\n'
    exit
fi

# Add to album if specified, otherwise print URLs.
if [[ "$use_album" == 'true' ]]; then
    create_album
else
    print_images
fi
